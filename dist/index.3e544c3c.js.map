{"mappings":"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","sources":["src/app.js"],"sourcesContent":["\"use strict\";\n\n/**\n * @class Model\n *\n * Manages the data of the application\n */\nclass Model {\n    constructor() {\n        this.todos = [\n            { id: 1, text: \"Run a marathon\", completed: true },\n            { id: 2, text: \"Plant a garden\", completed: false },\n        ];\n\n        this.todos = JSON.parse(localStorage.getItem(\"todos\")) || this.todos;\n    }\n\n    bindTodoListChanged(cb) {\n        this.onTodoListChanged = cb;\n    }\n\n    _commit(todos) {\n        this.onTodoListChanged(todos);\n        localStorage.setItem(\"todos\", JSON.stringify(todos));\n    }\n\n    addTodo(todoText) {\n        const todo = {\n            id:\n                this.todos.length > 0\n                    ? this.todos[this.todos.length - 1].id + 1\n                    : 1,\n            text: todoText,\n            complete: false,\n        };\n\n        this.todos.push(todo);\n\n        this._commit(this.todos);\n    }\n\n    editTodo(id, updatedText) {\n        this.todos.forEach((todo) => {\n            if (todo.id === id) {\n                todo.text = updatedText;\n            }\n        });\n        console.log(\"001\", this.todos);\n        this._commit(this.todos);\n    }\n\n    deleteTodo(id) {\n        this.todos = this.todos.filter((todo) => todo.id !== id);\n\n        this._commit(this.todos);\n    }\n\n    toggleTodo(id) {\n        console.log(id);\n        this.todos = this.todos.map((todo) => {\n            if (todo.id === id) {\n                todo.completed = !todo.completed;\n            }\n            return todo;\n        });\n        this._commit(this.todos);\n    }\n}\n\nclass View {\n    constructor() {\n        this.app = this.getElement(\"#root\");\n        this.app.classList.add(\"container\");\n\n        this.title = this.createElement(\"h1\", \"title\");\n        this.title.textContent = \"Todos\";\n\n        this.form = this.createElement(\"form\", \"form\");\n\n        this.input = this.createElement(\"input\", \"form__text\");\n        this.input.type = \"text\";\n        this.input.placeholder = \"Add todo\";\n        this.input.name = \"todo\";\n\n        this.submitButton = this.createElement(\n            \"button\",\n            \"button\",\n            \"form__button\"\n        );\n        this.submitButton.textContent = \"Submit\";\n        this.submitButton.type = \"submit\";\n\n        this.todoList = this.createElement(\"ul\", \"todo-list\");\n\n        this.form.append(this.input, this.submitButton);\n        this.app.append(this.title, this.form, this.todoList);\n\n        this._temporaryTodoText;\n        this._initLocalListeners();\n    }\n\n    _initLocalListeners() {\n        this.todoList.addEventListener(\"input\", (event) => {\n            if (event.target.classList.contains(\"todo-list__name\")) {\n                this._temporaryTodoText = event.target.innerText;\n            }\n        });\n    }\n\n    createElement(tag, ...classNames) {\n        const element = document.createElement(tag);\n        if (classNames) {\n            classNames.forEach((className) => {\n                element.classList.add(className);\n            });\n        }\n        return element;\n    }\n\n    getElement(selector, parent = document) {\n        return parent.querySelector(selector);\n    }\n\n    displayTodos(todos) {\n        // Delete all nodes\n        while (this.todoList.firstChild) {\n            this.todoList.removeChild(this.todoList.firstChild);\n        }\n\n        if (todos.length === 0) {\n            const p = this.createElement(\"p\");\n            p.textContent = \"Nothing to do! Add a task?\";\n            this.form.append(p);\n        } else {\n            todos.forEach((todo) => {\n                const task = this.createElement(\"li\", \"todo-list__item\");\n                console.log(\"002\", todo);\n                task.id = todo.id;\n\n                const checkbox = this.createElement(\n                    \"input\",\n                    \"todo-list__checkbox\"\n                );\n                checkbox.type = \"checkbox\";\n                checkbox.checked = todo.complete;\n\n                const name = this.createElement(\"span\", \"todo-list__name\");\n                name.contentEditable = true;\n                if (todo.completed) {\n                    const strike = this.createElement(\"s\");\n                    strike.textContent = todo.text;\n                    name.append(strike);\n                } else {\n                    name.textContent = todo.text;\n                }\n\n                const deleteButton = this.createElement(\n                    \"button\",\n                    \"todo-list__button\",\n                    \"button\",\n                    \"button--delete\"\n                );\n                deleteButton.textContent = \"Delete\";\n                task.append(checkbox, name, deleteButton);\n                this.todoList.append(task);\n            });\n        }\n    }\n\n    bindAddTodo(handler) {\n        this.form.addEventListener(\"submit\", (event) => {\n            event.preventDefault();\n\n            if (this._todoText) {\n                handler(this._todoText);\n                this._resetInput();\n            }\n        });\n    }\n\n    bindDeleteTodo(handler) {\n        this.todoList.addEventListener(\"click\", (event) => {\n            if (event.target.classList.contains(\"todo-list__button\")) {\n                const id = parseInt(event.target.parentElement.id);\n                handler(id);\n            }\n        });\n    }\n\n    bindToggleTodo(handler) {\n        this.todoList.addEventListener(\"change\", (event) => {\n            if (event.target.classList.contains(\"todo-list__checkbox\")) {\n                const id = parseInt(event.target.parentElement.id);\n                handler(id);\n            }\n        });\n    }\n\n    bindEditTodo(handler) {\n        this.todoList.addEventListener(\"focusout\", (event) => {\n            if (this._temporaryTodoText) {\n                const id = parseInt(event.target.parentElement.id);\n\n                handler(id, this._temporaryTodoText);\n                this._temporaryTodoText = \"\";\n            }\n        });\n    }\n\n    get _todoText() {\n        return this.input.value;\n    }\n\n    _resetInput() {\n        this.input.value = \"\";\n    }\n}\n\nclass Controller {\n    constructor(model, view) {\n        this.model = model;\n        this.view = view;\n\n        this.model.bindTodoListChanged(this.onTodoListChanged);\n        this.view.bindAddTodo(this.handleAddTodo);\n        this.view.bindDeleteTodo(this.handleDeleteTodo);\n        this.view.bindToggleTodo(this.handleToggleTodo);\n        this.view.bindEditTodo(this.handleEditTodo);\n\n        this.onTodoListChanged(this.model.todos);\n    }\n\n    onTodoListChanged = (todos) => {\n        this.view.displayTodos(todos);\n    };\n\n    handleAddTodo = (todoText) => {\n        this.model.addTodo(todoText);\n    };\n\n    handleDeleteTodo = (id) => {\n        this.model.deleteTodo(id);\n    };\n\n    handleEditTodo = (id, todoText) => {\n        this.model.editTodo(id, todoText);\n    };\n\n    handleToggleTodo = (id) => {\n        this.model.toggleTodo(id);\n    };\n}\n\nconst app = new Controller(new Model(), new View());\n"],"names":["Model","todos","id","text","completed","JSON","parse","localStorage","getItem","this","bindTodoListChanged","cb","onTodoListChanged","_commit","setItem","stringify","addTodo","todoText","todo","length","complete","push","editTodo","updatedText","forEach","console","log","deleteTodo","filter","toggleTodo","map","View","app","getElement","classList","add","title","createElement","textContent","form","input","type","placeholder","name","submitButton","todoList","append","_temporaryTodoText","_initLocalListeners","addEventListener","event","target","contains","innerText","tag","classNames","element","document","className","selector","parent","querySelector","displayTodos","firstChild","removeChild","p","task","checkbox","checked","contentEditable","strike","deleteButton","bindAddTodo","handler","preventDefault","_todoText","_resetInput","bindDeleteTodo","parseInt","parentElement","bindToggleTodo","bindEditTodo","value","Controller","model","view","handleAddTodo","handleDeleteTodo","handleToggleTodo","handleEditTodo"],"version":3,"file":"index.3e544c3c.js.map"}