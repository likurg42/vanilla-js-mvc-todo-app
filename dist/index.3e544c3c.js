"use strict";class Model{constructor(){this.todos=[{id:1,text:"Run a marathon",completed:!0},{id:2,text:"Plant a garden",completed:!1}],this.todos=JSON.parse(localStorage.getItem("todos"))||this.todos}bindTodoListChanged(t){this.onTodoListChanged=t}_commit(t){this.onTodoListChanged(t),localStorage.setItem("todos",JSON.stringify(t))}addTodo(t){const o={id:this.todos.length>0?this.todos[this.todos.length-1].id+1:1,text:t,complete:!1};this.todos.push(o),this._commit(this.todos)}editTodo(t,o){this.todos.forEach((e=>{e.id===t&&(e.text=o)})),console.log("001",this.todos),this._commit(this.todos)}deleteTodo(t){this.todos=this.todos.filter((o=>o.id!==t)),this._commit(this.todos)}toggleTodo(t){console.log(t),this.todos=this.todos.map((o=>(o.id===t&&(o.completed=!o.completed),o))),this._commit(this.todos)}}class View{constructor(){this.app=this.getElement("#root"),this.app.classList.add("container"),this.title=this.createElement("h1","title"),this.title.textContent="Todos",this.form=this.createElement("form","form"),this.input=this.createElement("input","form__text"),this.input.type="text",this.input.placeholder="Add todo",this.input.name="todo",this.submitButton=this.createElement("button","button","form__button"),this.submitButton.textContent="Submit",this.submitButton.type="submit",this.todoList=this.createElement("ul","todo-list"),this.form.append(this.input,this.submitButton),this.app.append(this.title,this.form,this.todoList),this._temporaryTodoText,this._initLocalListeners()}_initLocalListeners(){this.todoList.addEventListener("input",(t=>{t.target.classList.contains("todo-list__name")&&(this._temporaryTodoText=t.target.innerText)}))}createElement(t,...o){const e=document.createElement(t);return o&&o.forEach((t=>{e.classList.add(t)})),e}getElement(t,o=document){return o.querySelector(t)}displayTodos(t){for(;this.todoList.firstChild;)this.todoList.removeChild(this.todoList.firstChild);if(0===t.length){const t=this.createElement("p");t.textContent="Nothing to do! Add a task?",this.form.append(t)}else t.forEach((t=>{const o=this.createElement("li","todo-list__item");console.log("002",t),o.id=t.id;const e=this.createElement("input","todo-list__checkbox");e.type="checkbox",e.checked=t.complete;const i=this.createElement("span","todo-list__name");if(i.contentEditable=!0,t.completed){const o=this.createElement("s");o.textContent=t.text,i.append(o)}else i.textContent=t.text;const s=this.createElement("button","todo-list__button","button","button--delete");s.textContent="Delete",o.append(e,i,s),this.todoList.append(o)}))}bindAddTodo(t){this.form.addEventListener("submit",(o=>{o.preventDefault(),this._todoText&&(t(this._todoText),this._resetInput())}))}bindDeleteTodo(t){this.todoList.addEventListener("click",(o=>{if(o.target.classList.contains("todo-list__button")){const e=parseInt(o.target.parentElement.id);t(e)}}))}bindToggleTodo(t){this.todoList.addEventListener("change",(o=>{if(o.target.classList.contains("todo-list__checkbox")){const e=parseInt(o.target.parentElement.id);t(e)}}))}bindEditTodo(t){this.todoList.addEventListener("focusout",(o=>{if(this._temporaryTodoText){const e=parseInt(o.target.parentElement.id);t(e,this._temporaryTodoText),this._temporaryTodoText=""}}))}get _todoText(){return this.input.value}_resetInput(){this.input.value=""}}class Controller{constructor(t,o){this.model=t,this.view=o,this.model.bindTodoListChanged(this.onTodoListChanged),this.view.bindAddTodo(this.handleAddTodo),this.view.bindDeleteTodo(this.handleDeleteTodo),this.view.bindToggleTodo(this.handleToggleTodo),this.view.bindEditTodo(this.handleEditTodo),this.onTodoListChanged(this.model.todos)}onTodoListChanged=t=>{this.view.displayTodos(t)};handleAddTodo=t=>{this.model.addTodo(t)};handleDeleteTodo=t=>{this.model.deleteTodo(t)};handleEditTodo=(t,o)=>{this.model.editTodo(t,o)};handleToggleTodo=t=>{this.model.toggleTodo(t)}}const app=new Controller(new Model,new View);
//# sourceMappingURL=index.3e544c3c.js.map
